<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eli&#39;s Blog</title>
  
  <subtitle>How to make the world better？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://a2825818.github.io/"/>
  <updated>2018-05-01T12:04:53.704Z</updated>
  <id>http://a2825818.github.io/</id>
  
  <author>
    <name>Eli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 配置 sass-loader</title>
    <link href="http://a2825818.github.io/year/05/01/webpack-s-scss-loader/"/>
    <id>http://a2825818.github.io/year/05/01/webpack-s-scss-loader/</id>
    <published>2018-05-01T01:22:19.000Z</published>
    <updated>2018-05-01T12:04:53.704Z</updated>
    
    <content type="html"><![CDATA[<p>前端常常遇到許多繁瑣的問題，譬如SCSS寫好要編譯、CSS各瀏覽器要加上前綴、壓縮打包…等等，如果經常需要工程師自己手動處理，除了提高出錯率，也會降低開發效率。因此自動化工具變成前端越來越不可少的工具之一。</p><p>今天要來推薦最近很火的webpack，·由於webpack配置相當靈活，所以網路上很可能會查到許多不同的配置方式，以下示範的是如何配置 SCSS 編譯，以及會使用的相關插件。</p><h2 id="介紹webpack"><a href="#介紹webpack" class="headerlink" title="介紹webpack"></a>介紹webpack</h2><p>前端自動打包工具。官方提供不同的插件和 Loader，可靈活裝載和配置，解決不同的問題。</p><h2 id="基本安裝和配置"><a href="#基本安裝和配置" class="headerlink" title="基本安裝和配置"></a>基本安裝和配置</h2><h3 id="環境需求"><a href="#環境需求" class="headerlink" title="環境需求"></a>環境需求</h3><blockquote><p>nodejs</p></blockquote><h3 id="安裝webpack"><a href="#安裝webpack" class="headerlink" title="安裝webpack"></a>安裝webpack</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack＠3</span><br></pre></td></tr></table></figure><p>PS:因 webpack 4 套件相容有所更動，我未能將錯誤都排除，所以本範例使用版本是webpack 3 和相容的配置方式。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>文件樹狀圖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">webpack-dome</span><br><span class="line">  ├ dist</span><br><span class="line">  ├ node_modules</span><br><span class="line">  ├ scss</span><br><span class="line">  | ├ modules</span><br><span class="line">  | ├ pages</span><br><span class="line">  | └ partials</span><br><span class="line">  ├ index.html</span><br><span class="line">  ├ main.js</span><br><span class="line">  ├ package-lock.json</span><br><span class="line">  ├ package.json</span><br><span class="line">  └ webpack.config.js</span><br></pre></td></tr></table></figure></p><h2 id="webpack-config-js-文件配置"><a href="#webpack-config-js-文件配置" class="headerlink" title="webpack.config.js 文件配置"></a>webpack.config.js 文件配置</h2><h3 id="匯入-webpack-和相關插件"><a href="#匯入-webpack-和相關插件" class="headerlink" title="匯入 webpack 和相關插件"></a>匯入 webpack 和相關插件</h3><p>有時候在不同情境下，可能會將 CSS 按不同頁分開，就得使用這個插件，如果你沒有拆分 CSS 的需求，就不需要安裝。</p><blockquote><p>ExtractTextWebpackPlugin 能將 CSS 分離出來成單獨的檔案</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</span><br></pre></td></tr></table></figure><p>安裝 extract-text-webpack-plugin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i extract-text-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h3 id="文件入口"><a href="#文件入口" class="headerlink" title="文件入口"></a>文件入口</h3><p>entry 是設定文件的來源，可以多檔案打包成一支，也可以按需求打包不同的檔案，後面是文件來源，前面是生成文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    &apos;main&apos;: &apos;./main.js&apos;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 main.js 裡可以 import 各模塊，或者是寫上任何的JS。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">import &apos;./scss/pages/index.scss&apos;</span><br></pre></td></tr></table></figure><h3 id="文件出口"><a href="#文件出口" class="headerlink" title="文件出口"></a>文件出口</h3><p>output 是指定出口，通常都是在根的某個資料夾，一般取名為“dist”，他也有其他參數可設定</p><blockquote><p>譬如<br>path 指定一個資料夾，作為目標路徑<br>filename 指的就是生成的檔案要怎麼命名，而 [name] 就是按原檔名。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;[name].js&apos;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="外掛和套件"><a href="#外掛和套件" class="headerlink" title="外掛和套件"></a>外掛和套件</h3><p>plugins 是一些插件設置的地方，</p><blockquote><p>譬如<br>new webpack.optimize.OccurrenceOrderPlugin()  // 排序輸出，<br>new ExtractTextPlugin() // 將CSS獨立分割</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  new webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">  new ExtractTextPlugin(&#123;</span><br><span class="line">      filename: &quot;[name].css&quot;,</span><br><span class="line">      disable: process.env.NODE_ENV === &quot;development&quot;,</span><br><span class="line">      allChunks: true</span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h3><p>module 是設定加載 Loader 處理器的地方，而每個不同的 Loader 目的都是為了將不同的東西轉成可以被 Javascript 加載的模塊，譬如圖片、CSS 或其他語言，然後再進行處理、打包等。</p><p>sass-Loader 就是針對 SCSS 的處理器，當然也包含編譯成 CSS。</p><p>我們先將相關的 Loader 都裝起來。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sass-loader scc-loader style-loader postcss-loader autoprefixer --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>sass-loader        處理 SCSS<br>scc-loader        處理 CSS<br>style-loader        處理 <code>&lt;style&gt;</code> 裡的 CSS<br>postcss-loader    處理 CSS 其他雜事<br>autoprefixer        自動加 CSS 前綴</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.scss|.sass$/,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                 fallback: &quot;style-loader&quot;,</span><br><span class="line">                 use:[&#123;</span><br><span class="line">                   loader:&apos;css-loader&apos;,</span><br><span class="line">                   options:&#123;</span><br><span class="line">                     url:false,</span><br><span class="line">                     minimize: false,</span><br><span class="line">                     sourceMap: true,</span><br><span class="line">                     importLoaders: 1</span><br><span class="line">                   &#125;</span><br><span class="line">                 &#125;,</span><br><span class="line">                 &#123;</span><br><span class="line">                   loader:&apos;postcss-loader&apos;,</span><br><span class="line">                   options: &#123;</span><br><span class="line">                     ident: &apos;postcss&apos;,</span><br><span class="line">                     plugins: (loader) =&gt; [</span><br><span class="line">                       require(&apos;autoprefixer&apos;)(&#123;</span><br><span class="line">                         &quot;browsers&quot;: [&quot;last 5 versions&quot;]</span><br><span class="line">                       &#125;),</span><br><span class="line">                     ]</span><br><span class="line">                   &#125;</span><br><span class="line">                 &#125;,</span><br><span class="line">                 &#123;</span><br><span class="line">                   loader:&apos;sass-loader&apos;</span><br><span class="line">                 &#125;]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loader 的執行是由後到前的，而 postcss-loader 又規定要在 css-loader 之前處理完成。自然就變成了這樣的順序。<br>這裡使用了一個 autoprefixer ，設定主要瀏覽器的最後五個版本，作為前綴範圍，舒服阿 ～ (茶)</p><blockquote><p>曾在這裡遇過一個問題，就是在 SCSS 檔裡寫相對路徑，會造成編譯失敗的問題，<br>好像是 loader 對 url 解析不能以”.“作為開頭，<br>不過這樣配置之後，這個問題已解決。</p></blockquote><p>最後接手的 style-loader 是將 CSS 直接寫進<code>&lt;style&gt;</code>中，但有配置將 CSS 分割成獨立的檔案的話，它就會變成CSS檔，不會寫到JS裡，這裡可以看需求調整。</p><h3 id="執行-webpack"><a href="#執行-webpack" class="headerlink" title="執行 webpack"></a>執行 webpack</h3><p>這時候在 package.json 裡 scrpits 新增一行指令，即可在指令行快速使用 webpack</p><blockquote><p>webpack –config webpack.config.js 這段指定 webpack.config.js 文件，作為配置文件。<br>-w 就是持續監聽文件，如果一產生變化儲存，則自動進行編譯。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack --config webpack.config.js -w&quot;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>執行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>以下是我的範例包，有興趣的可以抓下來試看看。</p><p><a href="https://github.com/a2825818/webpack3-sass-loader-demo" target="_blank" rel="noopener">範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端常常遇到許多繁瑣的問題，譬如SCSS寫好要編譯、CSS各瀏覽器要加上前綴、壓縮打包…等等，如果經常需要工程師自己手動處理，除了提高出錯率，也會降低開發效率。因此自動化工具變成前端越來越不可少的工具之一。&lt;/p&gt;
&lt;p&gt;今天要來推薦最近很火的webpack，·由於webp
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://a2825818.github.io/tags/webpack/"/>
    
      <category term="sass-loader" scheme="http://a2825818.github.io/tags/sass-loader/"/>
    
      <category term="自動打包" scheme="http://a2825818.github.io/tags/%E8%87%AA%E5%8B%95%E6%89%93%E5%8C%85/"/>
    
      <category term="自動化工具" scheme="http://a2825818.github.io/tags/%E8%87%AA%E5%8B%95%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 安裝教學</title>
    <link href="http://a2825818.github.io/year/04/14/how-to-setup-hexo/"/>
    <id>http://a2825818.github.io/year/04/14/how-to-setup-hexo/</id>
    <published>2018-04-14T02:12:03.000Z</published>
    <updated>2018-05-02T01:54:26.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介紹-Hexo"><a href="#介紹-Hexo" class="headerlink" title="介紹 Hexo"></a>介紹 Hexo</h2><p><a href="https://hexo.io/zh-tw/" target="_blank" rel="noopener">Hexo</a>是一款可自定義，輕量級，可部署在 Github 的部落格框架。</p><h2 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h2><blockquote><p>環境需求</p><ul><li>Git</li><li>Nodejs</li></ul></blockquote><h3 id="下載-Nodejs-和-Git"><a href="#下載-Nodejs-和-Git" class="headerlink" title="下載 Nodejs 和 Git"></a>下載 Nodejs 和 Git</h3><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git官網</a><br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官網</a></p><p>我們安裝 Node 後，就能使用 NPM 來管理我們的工具包，因為 Hexo 多半是用指令來安裝套件、執行和部署。</p><h3 id="安裝-Hexo-cli"><a href="#安裝-Hexo-cli" class="headerlink" title="安裝 Hexo-cli"></a>安裝 Hexo-cli</h3><p>將 Hexo-cli 裝在全局，才可以使用 Hexo 下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="hexo-創建一個部落格"><a href="#hexo-創建一個部落格" class="headerlink" title="hexo 創建一個部落格"></a>hexo 創建一個部落格</h3><p>它會自動生成一包資料夾，進到資料夾將套件安裝起來</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="生成新文章"><a href="#生成新文章" class="headerlink" title="生成新文章"></a>生成新文章</h3><p>新增一篇新文章，預設會在 _posts 下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>或是新增一個分類，它會自動在幫你新增此分類下的第一篇文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><h3 id="清除已生成靜態文件"><a href="#清除已生成靜態文件" class="headerlink" title="清除已生成靜態文件"></a>清除已生成靜態文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="生成靜態文件"><a href="#生成靜態文件" class="headerlink" title="生成靜態文件"></a>生成靜態文件</h3><p>如果有頁面結構有修正，需要清除後重新生成，才看得到改變。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="運行"><a href="#運行" class="headerlink" title="運行"></a>運行</h3><p>可以運行在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 上看一下結果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>先在 _config.yml 先設定好要 push 的地方位置，在這裡也要設定一下SSH，等等才能順利傳上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安裝 hexo-deployer-git 套件，才能夠用指令的方式部署到 Github。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>下了指令·就會按照所設定的，自動部署。<br>就可以在自己的 yourname.github.io 上看到自己的部落格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="更換版型"><a href="#更換版型" class="headerlink" title="更換版型"></a>更換版型</h3><p>先到 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo</a> 挑一個自己喜歡的版型，然後將它 pull 下來到 themes 資料夾內。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/imbyron/hexo-theme-icalm.git ./themes/icalm</span><br></pre></td></tr></table></figure><p>然後在 _config.yml 設定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: icalm</span><br></pre></td></tr></table></figure><p>每個版型可能有不同的配置，大概參考一下作者的文件修改。</p><p>如果有自己想要換圖或改CSS的地方，只要進到版型的 source 裡去修改即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介紹-Hexo&quot;&gt;&lt;a href=&quot;#介紹-Hexo&quot; class=&quot;headerlink&quot; title=&quot;介紹 Hexo&quot;&gt;&lt;/a&gt;介紹 Hexo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-tw/&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="blog" scheme="http://a2825818.github.io/tags/blog/"/>
    
      <category term="Hexo" scheme="http://a2825818.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>部落格緣起</title>
    <link href="http://a2825818.github.io/year/04/09/post/"/>
    <id>http://a2825818.github.io/year/04/09/post/</id>
    <published>2018-04-09T12:13:18.000Z</published>
    <updated>2018-04-11T10:30:41.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><p>其實之前就有想要寫技術部落格的衝動，只是一直不曉得該挑哪個平台好，但我多少想專業些，希望可以架個只有工程師才能寫的部落格，展現一點內涵，畢竟看文章的都是有內涵的人士。 hexo 一款輕量級又可靈活安裝零組件的部落格，可以部署到 github 的空間，剛好滿足我那點需求。</p><p>目前部落格雖然有點陽春，但未來更多小功能還持續摸索中，敬請期待。</p><h2 id="部落格撰文方向"><a href="#部落格撰文方向" class="headerlink" title="部落格撰文方向"></a>部落格撰文方向</h2><h3 id="前端工程"><a href="#前端工程" class="headerlink" title="前端工程"></a>前端工程</h3><p>身為前端工程師，自然是將所學會的前端技術分享在部落格之中，前端領域發展速度相當驚人，有時我們問題的解決都是仰賴別人分享的經驗，因此為前端貢獻一些資源，說不定也能解決哪個角落的問題。雖然我無法像那些民間狂人，一有新技術就分析拆解，理出技術的核心邏輯，但至少講解如何使用，我還是可以辦到的。</p><p>相信一點一滴分享的力量，可以解決新手很多小問題，少走很多彎路。</p><h3 id="學習歷程"><a href="#學習歷程" class="headerlink" title="學習歷程"></a>學習歷程</h3><p>這部落格也是學習自律，來紀錄學習技術的歷程。未來可能會遇到很多新技術，或者是相關領域的技術發展，抱持著不能熟練也要略懂的精神，勢必要研究一下，再寫些玩趣的結果，雖然不表示技術力會因而提升多少，但在這過程當中會得到什麼啟發也說不定，工程師的第一標語就是，終身學習。</p><h3 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h3><p>聚沙成塔，持之以恆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;緣起&quot;&gt;&lt;a href=&quot;#緣起&quot; class=&quot;headerlink&quot; title=&quot;緣起&quot;&gt;&lt;/a&gt;緣起&lt;/h2&gt;&lt;p&gt;其實之前就有想要寫技術部落格的衝動，只是一直不曉得該挑哪個平台好，但我多少想專業些，希望可以架個只有工程師才能寫的部落格，展現一點內涵，畢竟
      
    
    </summary>
    
    
      <category term="blog" scheme="http://a2825818.github.io/tags/blog/"/>
    
      <category term="前端工程" scheme="http://a2825818.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
</feed>
